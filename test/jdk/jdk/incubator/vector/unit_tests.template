/*
 * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * @test
 * @modules jdk.incubator.vector
 * @run testng/othervm -ea -esa -Xbatch $vectorteststype$
 */

#warn This file is preprocessed before being compiled

import jdk.incubator.vector.VectorShape;
import jdk.incubator.vector.VectorSpecies;
import jdk.incubator.vector.VectorShuffle;
import jdk.incubator.vector.VectorMask;
import jdk.incubator.vector.VectorOperators;
import jdk.incubator.vector.Vector;

#if[Byte]
import jdk.incubator.vector.ByteVector;
#end[Byte]
#if[Float]
import jdk.incubator.vector.FloatVector;
#end[Float]
#if[Int]
import jdk.incubator.vector.IntVector;
#end[Int]
#if[Double]
import jdk.incubator.vector.DoubleVector;
#end[Double]
#if[Short]
import jdk.incubator.vector.ShortVector;
#end[Short]
#if[Long]
import jdk.incubator.vector.LongVector;
#end[Long]

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.lang.Integer;
import java.util.List;
import java.util.Arrays;
import java.util.function.BiFunction;
import java.util.function.IntFunction;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Test
public class $vectorteststype$ extends AbstractVectorTest {

#if[MaxBit]
    static final VectorSpecies<$Wideboxtype$> SPECIES =
                $Type$Vector.SPECIES_MAX;
#else[MaxBit]
    static final VectorSpecies<$Wideboxtype$> SPECIES =
                $Type$Vector.SPECIES_$bits$;
#end[MaxBit]

    static final int INVOC_COUNT = Integer.getInteger("jdk.incubator.vector.test.loop-iterations", 100);

#if[MaxBit]
    static VectorShape getMaxBit() {
        return VectorShape.S_Max_BIT;
    }

    private static final int Max = 256;  // juts so we can do N/$bits$
#end[MaxBit]

    static final int BUFFER_REPS = Integer.getInteger("jdk.incubator.vector.test.buffer-vectors", 25000 / $bits$);

    static final int BUFFER_SIZE = Integer.getInteger("jdk.incubator.vector.test.buffer-size", BUFFER_REPS * ($bits$ / 8));

    interface FUnOp {
        $type$ apply($type$ a);
    }

    static void assertArraysEquals($type$[] a, $type$[] r, FUnOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i]));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i]), "at index #" + i + ", input = " + a[i]);
        }
    }

    interface FUnArrayOp {
        $type$[] apply($type$ a);
    }

    static void assertArraysEquals($type$[] a, $type$[] r, FUnArrayOp f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a[i]));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a[i]);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res, "(ref: " + Arrays.toString(ref)
              + ", res: " + Arrays.toString(res)
              + "), at index #" + i);
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] r, boolean[] mask, FUnOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], mask[i % SPECIES.length()] ? f.apply(a[i]) : a[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], mask[i % SPECIES.length()] ? f.apply(a[i]) : a[i], "at index #" + i + ", input = " + a[i] + ", mask = " + mask[i % SPECIES.length()]);
        }
    }

    interface FReductionOp {
        $type$ apply($type$[] a, int idx);
    }

    interface FReductionAllOp {
        $type$ apply($type$[] a);
    }

    static void assertReductionArraysEquals($type$[] a, $type$[] b, $type$ c,
                                            FReductionOp f, FReductionAllOp fa) {
        int i = 0;
        try {
            Assert.assertEquals(c, fa.apply(a));
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(b[i], f.apply(a, i));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(c, fa.apply(a), "Final result is incorrect!");
            Assert.assertEquals(b[i], f.apply(a, i), "at index #" + i);
        }
    }

    interface FReductionMaskedOp {
        $type$ apply($type$[] a, int idx, boolean[] mask);
    }

    interface FReductionAllMaskedOp {
        $type$ apply($type$[] a, boolean[] mask);
    }

    static void assertReductionArraysEqualsMasked($type$[] a, $type$[] b, $type$ c, boolean[] mask,
                                            FReductionMaskedOp f, FReductionAllMaskedOp fa) {
        int i = 0;
        try {
            Assert.assertEquals(c, fa.apply(a, mask));
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(b[i], f.apply(a, i, mask));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(c, fa.apply(a, mask), "Final result is incorrect!");
            Assert.assertEquals(b[i], f.apply(a, i, mask), "at index #" + i);
        }
    }

#if[!Long]
    interface FReductionOpLong {
        long apply($type$[] a, int idx);
    }

    interface FReductionAllOpLong {
        long apply($type$[] a);
    }

    static void assertReductionLongArraysEquals($type$[] a, long[] b, long c,
                                            FReductionOpLong f, FReductionAllOpLong fa) {
        int i = 0;
        try {
            Assert.assertEquals(c, fa.apply(a));
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(b[i], f.apply(a, i));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(c, fa.apply(a), "Final result is incorrect!");
            Assert.assertEquals(b[i], f.apply(a, i), "at index #" + i);
        }
    }

    interface FReductionMaskedOpLong {
        long apply($type$[] a, int idx, boolean[] mask);
    }

    interface FReductionAllMaskedOpLong {
        long apply($type$[] a, boolean[] mask);
    }

    static void assertReductionLongArraysEqualsMasked($type$[] a, long[] b, long c, boolean[] mask,
                                            FReductionMaskedOpLong f, FReductionAllMaskedOpLong fa) {
        int i = 0;
        try {
            Assert.assertEquals(c, fa.apply(a, mask));
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(b[i], f.apply(a, i, mask));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(c, fa.apply(a, mask), "Final result is incorrect!");
            Assert.assertEquals(b[i], f.apply(a, i, mask), "at index #" + i);
        }
    }
#end[!Long]

    interface FBoolReductionOp {
        boolean apply(boolean[] a, int idx);
    }

    static void assertReductionBoolArraysEquals(boolean[] a, boolean[] b, FBoolReductionOp f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(b[i], f.apply(a, i));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(b[i], f.apply(a, i), "at index #" + i);
        }
    }

    static void assertInsertArraysEquals($type$[] a, $type$[] b, $type$ element, int index) {
        int i = 0;
        try {
            for (; i < a.length; i += 1) {
                if(i%SPECIES.length() == index) {
                    Assert.assertEquals(b[i], element);
                } else {
                    Assert.assertEquals(b[i], a[i]);
                }
            }
        } catch (AssertionError e) {
            if (i%SPECIES.length() == index) {
                Assert.assertEquals(b[i], element, "at index #" + i);
            } else {
                Assert.assertEquals(b[i], a[i], "at index #" + i);
            }
        }
    }

    static void assertRearrangeArraysEquals($type$[] a, $type$[] r, int[] order, int vector_len) {
        int i = 0, j = 0;
        try {
            for (; i < a.length; i += vector_len) {
                for (j = 0; j < vector_len; j++) {
                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);
                }
            }
        } catch (AssertionError e) {
            int idx = i + j;
            Assert.assertEquals(r[i+j], a[i+order[i+j]], "at index #" + idx + ", input = " + a[i+order[i+j]]);
        }
    }

    static void assertSelectFromArraysEquals($type$[] a, $type$[] r, $type$[] order, int vector_len) {
        int i = 0, j = 0;
        try {
            for (; i < a.length; i += vector_len) {
                for (j = 0; j < vector_len; j++) {
                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);
                }
            }
        } catch (AssertionError e) {
            int idx = i + j;
            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], "at index #" + idx + ", input = " + a[i+(int)order[i+j]]);
        }
    }

    static void assertRearrangeArraysEquals($type$[] a, $type$[] r, int[] order, boolean[] mask, int vector_len) {
        int i = 0, j = 0;
        try {
            for (; i < a.length; i += vector_len) {
                for (j = 0; j < vector_len; j++) {
                    if (mask[j % SPECIES.length()])
                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);
                    else
                         Assert.assertEquals(r[i+j], ($type$)0);
                }
            }
        } catch (AssertionError e) {
            int idx = i + j;
            if (mask[j % SPECIES.length()])
                Assert.assertEquals(r[i+j], a[i+order[i+j]], "at index #" + idx + ", input = " + a[i+order[i+j]] + ", mask = " + mask[j % SPECIES.length()]);
            else
                Assert.assertEquals(r[i+j], ($type$)0, "at index #" + idx + ", input = " + a[i+order[i+j]] + ", mask = " + mask[j % SPECIES.length()]);
        }
    }

    static void assertSelectFromArraysEquals($type$[] a, $type$[] r, $type$[] order, boolean[] mask, int vector_len) {
        int i = 0, j = 0;
        try {
            for (; i < a.length; i += vector_len) {
                for (j = 0; j < vector_len; j++) {
                    if (mask[j % SPECIES.length()])
                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);
                    else
                         Assert.assertEquals(r[i+j], ($type$)0);
                }
            }
        } catch (AssertionError e) {
            int idx = i + j;
            if (mask[j % SPECIES.length()])
                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], "at index #" + idx + ", input = " + a[i+(int)order[i+j]] + ", mask = " + mask[j % SPECIES.length()]);
            else
                Assert.assertEquals(r[i+j], ($type$)0, "at index #" + idx + ", input = " + a[i+(int)order[i+j]] + ", mask = " + mask[j % SPECIES.length()]);
        }
    }

    static void assertBroadcastArraysEquals($type$[]a, $type$[]r) {
        int i = 0;
        for (; i < a.length; i += SPECIES.length()) {
            int idx = i;
            for (int j = idx; j < (idx + SPECIES.length()); j++)
                a[j]=a[idx];
        }

        try {
            for (i = 0; i < a.length; i++) {
                Assert.assertEquals(r[i], a[i]);
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], a[i], "at index #" + i + ", input = " + a[i]);
        }
    }

    interface FBinOp {
        $type$ apply($type$ a, $type$ b);
    }

    interface FBinMaskOp {
        $type$ apply($type$ a, $type$ b, boolean m);

        static FBinMaskOp lift(FBinOp f) {
            return (a, b, m) -> m ? f.apply(a, b) : a;
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, FBinOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[i]));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i], b[i]), "(" + a[i] + ", " + b[i] + ") at index #" + i);
        }
    }

    static void assertBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] r, FBinOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()]));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()]),
                                "(" + a[i] + ", " + b[(i / SPECIES.length()) * SPECIES.length()] + ") at index #" + i);
        }
    }

#if[!FP]
    static void assertBroadcastLongArraysEquals($type$[] a, $type$[] b, $type$[] r, FBinOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i / SPECIES.length()) * SPECIES.length()])));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i / SPECIES.length()) * SPECIES.length()])),
                                "(" + a[i] + ", " + b[(i / SPECIES.length()) * SPECIES.length()] + ") at index #" + i);
        }
    }
#end[!FP]

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinOp f) {
        assertArraysEquals(a, b, r, mask, FBinMaskOp.lift(f));
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[i], mask[i % SPECIES.length()]));
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i], f.apply(a[i], b[i], mask[i % SPECIES.length()]), "at index #" + i + ", input1 = " + a[i] + ", input2 = " + b[i] + ", mask = " + mask[i % SPECIES.length()]);
        }
    }

    static void assertBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinOp f) {
        assertBroadcastArraysEquals(a, b, r, mask, FBinMaskOp.lift(f));
    }

    static void assertBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()], mask[i % SPECIES.length()]));
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()],
                                mask[i % SPECIES.length()]), "at index #" + i + ", input1 = " + a[i] +
                                ", input2 = " + b[(i / SPECIES.length()) * SPECIES.length()] + ", mask = " +
                                mask[i % SPECIES.length()]);
        }
    }

#if[!FP]
    static void assertBroadcastLongArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinOp f) {
        assertBroadcastLongArraysEquals(a, b, r, mask, FBinMaskOp.lift(f));
    }

    static void assertBroadcastLongArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i / SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i / SPECIES.length()) * SPECIES.length()]),
                                mask[i % SPECIES.length()]), "at index #" + i + ", input1 = " + a[i] +
                                ", input2 = " + b[(i / SPECIES.length()) * SPECIES.length()] + ", mask = " +
                                mask[i % SPECIES.length()]);
        }
    }
#end[!FP]

    static void assertShiftArraysEquals($type$[] a, $type$[] b, $type$[] r, FBinOp f) {
        int i = 0;
        int j = 0;
        try {
            for (; j < a.length; j += SPECIES.length()) {
                for (i = 0; i < SPECIES.length(); i++) {
                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));
                }
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), "at index #" + i + ", " + j);
        }
    }

    static void assertShiftArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinOp f) {
        assertShiftArraysEquals(a, b, r, mask, FBinMaskOp.lift(f));
    }

    static void assertShiftArraysEquals($type$[] a, $type$[] b, $type$[] r, boolean[] mask, FBinMaskOp f) {
        int i = 0;
        int j = 0;
        try {
            for (; j < a.length; j += SPECIES.length()) {
                for (i = 0; i < SPECIES.length(); i++) {
                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));
                }
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), "at index #" + i + ", input1 = " + a[i+j] + ", input2 = " + b[j] + ", mask = " + mask[i]);
        }
    }

    interface FTernOp {
        $type$ apply($type$ a, $type$ b, $type$ c);
    }

    interface FTernMaskOp {
        $type$ apply($type$ a, $type$ b, $type$ c, boolean m);

        static FTernMaskOp lift(FTernOp f) {
            return (a, b, c, m) -> m ? f.apply(a, b, c) : a;
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, FTernOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i]), "at index #" + i + ", input1 = " + a[i] + ", input2 = " + b[i] + ", input3 = " + c[i]);
        }
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask, FTernOp f) {
        assertArraysEquals(a, b, c, r, mask, FTernMaskOp.lift(f));
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask, FTernMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i], mask[i % SPECIES.length()]));
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i], f.apply(a[i], b[i], c[i], mask[i % SPECIES.length()]), "at index #" + i + ", input1 = " + a[i] + ", input2 = "
              + b[i] + ", input3 = " + c[i] + ", mask = " + mask[i % SPECIES.length()]);
        }
    }

    static void assertBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, FTernOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[i], c[(i / SPECIES.length()) * SPECIES.length()]));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i], b[i], c[(i / SPECIES.length()) * SPECIES.length()]), "at index #" +
                                i + ", input1 = " + a[i] + ", input2 = " + b[i] + ", input3 = " +
                                c[(i / SPECIES.length()) * SPECIES.length()]);
        }
    }

    static void assertAltBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, FTernOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()], c[i]));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()], c[i]), "at index #" +
                                i + ", input1 = " + a[i] + ", input2 = " +
                                b[(i / SPECIES.length()) * SPECIES.length()] + ",  input3 = " + c[i]);
        }
    }

    static void assertBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask,
                                            FTernOp f) {
        assertBroadcastArraysEquals(a, b, c, r, mask, FTernMaskOp.lift(f));
    }

    static void assertBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask,
                                            FTernMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[i], c[(i / SPECIES.length()) * SPECIES.length()],
                                    mask[i % SPECIES.length()]));
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i], f.apply(a[i], b[i], c[(i / SPECIES.length()) * SPECIES.length()],
                                mask[i % SPECIES.length()]), "at index #" + i + ", input1 = " + a[i] + ", input2 = " +
                                b[i] + ", input3 = " + c[(i / SPECIES.length()) * SPECIES.length()] + ", mask = " +
                                mask[i % SPECIES.length()]);
        }
    }

    static void assertAltBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask,
                                            FTernOp f) {
        assertAltBroadcastArraysEquals(a, b, c, r, mask, FTernMaskOp.lift(f));
    }

    static void assertAltBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask,
                                            FTernMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()], c[i],
                                    mask[i % SPECIES.length()]));
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()], c[i],
                                mask[i % SPECIES.length()]), "at index #" + i + ", input1 = " + a[i] +
                                ", input2 = " + b[(i / SPECIES.length()) * SPECIES.length()] +
                                ", input3 = " + c[i] + ", mask = " + mask[i % SPECIES.length()]);
        }
    }

    static void assertDoubleBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, FTernOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()],
                                    c[(i / SPECIES.length()) * SPECIES.length()]));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()],
                                c[(i / SPECIES.length()) * SPECIES.length()]), "at index #" + i + ", input1 = " + a[i]
                                + ", input2 = " + b[(i / SPECIES.length()) * SPECIES.length()] + ", input3 = " +
                                c[(i / SPECIES.length()) * SPECIES.length()]);
        }
    }

    static void assertDoubleBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask,
                                                  FTernOp f) {
        assertDoubleBroadcastArraysEquals(a, b, c, r, mask, FTernMaskOp.lift(f));
    }

    static void assertDoubleBroadcastArraysEquals($type$[] a, $type$[] b, $type$[] c, $type$[] r, boolean[] mask,
                                                  FTernMaskOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()],
                                    c[(i / SPECIES.length()) * SPECIES.length()], mask[i % SPECIES.length()]));
            }
        } catch (AssertionError err) {
            Assert.assertEquals(r[i], f.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()],
                                c[(i / SPECIES.length()) * SPECIES.length()], mask[i % SPECIES.length()]), "at index #"
                                + i + ", input1 = " + a[i] + ", input2 = " + b[(i / SPECIES.length()) * SPECIES.length()] +
                                ", input3 = " + c[(i / SPECIES.length()) * SPECIES.length()] + ", mask = " +
                                mask[i % SPECIES.length()]);
        }
    }


#if[FP]
    static boolean isWithin1Ulp($type$ actual, $type$ expected) {
        if ($Type$.isNaN(expected) && !$Type$.isNaN(actual)) {
            return false;
        } else if (!$Type$.isNaN(expected) && $Type$.isNaN(actual)) {
            return false;
        }

        $type$ low = Math.nextDown(expected);
        $type$ high = Math.nextUp(expected);

        if ($Type$.compare(low, expected) > 0) {
            return false;
        }

        if ($Type$.compare(high, expected) < 0) {
            return false;
        }

        return true;
    }

    static void assertArraysEqualsWithinOneUlp($type$[] a, $type$[] r, FUnOp mathf, FUnOp strictmathf) {
        int i = 0;
        try {
            // Check that result is within 1 ulp of strict math or equivalent to math implementation.
            for (; i < a.length; i++) {
                Assert.assertTrue($Type$.compare(r[i], mathf.apply(a[i])) == 0 ||
                                    isWithin1Ulp(r[i], strictmathf.apply(a[i])));
            }
        } catch (AssertionError e) {
            Assert.assertTrue($Type$.compare(r[i], mathf.apply(a[i])) == 0, "at index #" + i + ", input = " + a[i] + ", actual = " + r[i] + ", expected = " + mathf.apply(a[i]));
            Assert.assertTrue(isWithin1Ulp(r[i], strictmathf.apply(a[i])), "at index #" + i + ", input = " + a[i] + ", actual = " + r[i] + ", expected (within 1 ulp) = " + strictmathf.apply(a[i]));
        }
    }

    static void assertArraysEqualsWithinOneUlp($type$[] a, $type$[] b, $type$[] r, FBinOp mathf, FBinOp strictmathf) {
        int i = 0;
        try {
            // Check that result is within 1 ulp of strict math or equivalent to math implementation.
            for (; i < a.length; i++) {
                Assert.assertTrue($Type$.compare(r[i], mathf.apply(a[i], b[i])) == 0 ||
                                    isWithin1Ulp(r[i], strictmathf.apply(a[i], b[i])));
            }
        } catch (AssertionError e) {
            Assert.assertTrue($Type$.compare(r[i], mathf.apply(a[i], b[i])) == 0, "at index #" + i + ", input1 = " + a[i] + ", input2 = " + b[i] + ", actual = " + r[i] + ", expected = " + mathf.apply(a[i], b[i]));
            Assert.assertTrue(isWithin1Ulp(r[i], strictmathf.apply(a[i], b[i])), "at index #" + i + ", input1 = " + a[i] + ", input2 = " + b[i] + ", actual = " + r[i] + ", expected (within 1 ulp) = " + strictmathf.apply(a[i], b[i]));
        }
    }

    static void assertBroadcastArraysEqualsWithinOneUlp($type$[] a, $type$[] b, $type$[] r,
                                                        FBinOp mathf, FBinOp strictmathf) {
        int i = 0;
        try {
            // Check that result is within 1 ulp of strict math or equivalent to math implementation.
            for (; i < a.length; i++) {
                Assert.assertTrue($Type$.compare(r[i],
                                  mathf.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()])) == 0 ||
                                  isWithin1Ulp(r[i],
                                  strictmathf.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()])));
            }
        } catch (AssertionError e) {
            Assert.assertTrue($Type$.compare(r[i],
                              mathf.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()])) == 0,
                              "at index #" + i + ", input1 = " + a[i] + ", input2 = " +
                              b[(i / SPECIES.length()) * SPECIES.length()] + ", actual = " + r[i] +
                              ", expected = " + mathf.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()]));
            Assert.assertTrue(isWithin1Ulp(r[i],
                              strictmathf.apply(a[i], b[(i / SPECIES.length()) * SPECIES.length()])),
                             "at index #" + i + ", input1 = " + a[i] + ", input2 = " +
                             b[(i / SPECIES.length()) * SPECIES.length()] + ", actual = " + r[i] +
                             ", expected (within 1 ulp) = " + strictmathf.apply(a[i],
                             b[(i / SPECIES.length()) * SPECIES.length()]));
        }
    }
#end[FP]

    interface FBinArrayOp {
        $type$ apply($type$[] a, int b);
    }

    static void assertArraysEquals($type$[] a, $type$[] r, FBinArrayOp f) {
        int i = 0;
        try {
            for (; i < a.length; i++) {
                Assert.assertEquals(r[i], f.apply(a, i));
            }
        } catch (AssertionError e) {
            Assert.assertEquals(r[i], f.apply(a,i), "at index #" + i);
        }
    }

    interface FGatherScatterOp {
        $type$[] apply($type$[] a, int ix, int[] b, int iy);
    }

    static void assertArraysEquals($type$[] a, int[] b, $type$[] r, FGatherScatterOp f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a, i, b, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a, i, b, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(res, ref,
              "(ref: " + Arrays.toString(ref) + ", res: " + Arrays.toString(res) + ", a: "
              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))
              + ", b: "
              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))
              + " at index #" + i);
        }
    }

    interface FGatherMaskedOp {
        $type$[] apply($type$[] a, int ix, boolean[] mask, int[] b, int iy);
    }

    interface FScatterMaskedOp {
        $type$[] apply($type$[] r, $type$[] a, int ix, boolean[] mask, int[] b, int iy);
    }

    static void assertArraysEquals($type$[] a, int[] b, $type$[] r, boolean[] mask, FGatherMaskedOp f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a, i, mask, b, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a, i, mask, b, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res,
              "(ref: " + Arrays.toString(ref) + ", res: " + Arrays.toString(res) + ", a: "
              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))
              + ", b: "
              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))
              + ", mask: "
              + Arrays.toString(mask)
              + " at index #" + i);
        }
    }

    static void assertArraysEquals($type$[] a, int[] b, $type$[] r, boolean[] mask, FScatterMaskedOp f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(r, a, i, mask, b, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(r, a, i, mask, b, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res,
              "(ref: " + Arrays.toString(ref) + ", res: " + Arrays.toString(res) + ", a: "
              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))
              + ", b: "
              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))
              + ", r: "
              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))
              + ", mask: "
              + Arrays.toString(mask)
              + " at index #" + i);
        }
    }

    interface FLaneOp {
        $type$[] apply($type$[] a, int origin, int idx);
    }

    static void assertArraysEquals($type$[] a, $type$[] r, int origin, FLaneOp f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a, origin, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a, origin, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res, "(ref: " + Arrays.toString(ref)
              + ", res: " + Arrays.toString(res)
              + "), at index #" + i);
        }
    }

    interface FLaneBop {
        $type$[] apply($type$[] a, $type$[] b, int origin, int idx);
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, int origin, FLaneBop f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a, b, origin, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a, b, origin, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res, "(ref: " + Arrays.toString(ref)
              + ", res: " + Arrays.toString(res)
              + "), at index #" + i
              + ", at origin #" + origin);
        }
    }

    interface FLaneMaskedBop {
        $type$[] apply($type$[] a, $type$[] b, int origin, boolean[] mask, int idx);
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, int origin, boolean[] mask, FLaneMaskedBop f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a, b, origin, mask, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a, b, origin, mask, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res, "(ref: " + Arrays.toString(ref)
              + ", res: " + Arrays.toString(res)
              + "), at index #" + i
              + ", at origin #" + origin);
        }
    }

    interface FLanePartBop {
        $type$[] apply($type$[] a, $type$[] b, int origin, int part, int idx);
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, int origin, int part, FLanePartBop f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a, b, origin, part, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a, b, origin, part, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res, "(ref: " + Arrays.toString(ref)
              + ", res: " + Arrays.toString(res)
              + "), at index #" + i
              + ", at origin #" + origin
              + ", with part #" + part);
        }
    }

    interface FLanePartMaskedBop {
        $type$[] apply($type$[] a, $type$[] b, int origin, int part, boolean[] mask, int idx);
    }

    static void assertArraysEquals($type$[] a, $type$[] b, $type$[] r, int origin, int part, boolean[] mask, FLanePartMaskedBop f) {
        int i = 0;
        try {
            for (; i < a.length; i += SPECIES.length()) {
                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),
                  f.apply(a, b, origin, part, mask, i));
            }
        } catch (AssertionError e) {
            $type$[] ref = f.apply(a, b, origin, part, mask, i);
            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());
            Assert.assertEquals(ref, res, "(ref: " + Arrays.toString(ref)
              + ", res: " + Arrays.toString(res)
              + "), at index #" + i
              + ", at origin #" + origin
              + ", with part #" + part);
        }
    }

    static $bitstype$ bits($type$ e) {
        return {#if[FP]? $Type$.$type$To$Bitstype$Bits(e): e};
    }

    static final List<IntFunction<$type$[]>> $TYPE$_GENERATORS = List.of(
            withToString("$type$[-i * 5]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> ($type$)(-i * 5));
            }),
            withToString("$type$[i * 5]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> ($type$)(i * 5));
            }),
            withToString("$type$[i + 1]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));
            }),
            withToString("$type$[cornerCaseValue(i)]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> cornerCaseValue(i));
            })
    );

    // Create combinations of pairs
    // @@@ Might be sensitive to order e.g. div by 0
    static final List<List<IntFunction<$type$[]>>> $TYPE$_GENERATOR_PAIRS =
        Stream.of($TYPE$_GENERATORS.get(0)).
                flatMap(fa -> $TYPE$_GENERATORS.stream().skip(1).map(fb -> List.of(fa, fb))).
                collect(Collectors.toList());

    @DataProvider
    public Object[][] boolUnaryOpProvider() {
        return BOOL_ARRAY_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    static final List<List<IntFunction<$type$[]>>> $TYPE$_GENERATOR_TRIPLES =
        $TYPE$_GENERATOR_PAIRS.stream().
                flatMap(pair -> $TYPE$_GENERATORS.stream().map(f -> List.of(pair.get(0), pair.get(1), f))).
                collect(Collectors.toList());

    @DataProvider
    public Object[][] $type$BinaryOpProvider() {
        return $TYPE$_GENERATOR_PAIRS.stream().map(List::toArray).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$IndexedOpProvider() {
        return $TYPE$_GENERATOR_PAIRS.stream().map(List::toArray).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$BinaryOpMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> $TYPE$_GENERATOR_PAIRS.stream().map(lfa -> {
                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();
                })).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$TernaryOpProvider() {
        return $TYPE$_GENERATOR_TRIPLES.stream().map(List::toArray).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$TernaryOpMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> $TYPE$_GENERATOR_TRIPLES.stream().map(lfa -> {
                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();
                })).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryOpProvider() {
        return $TYPE$_GENERATORS.stream().
                map(f -> new Object[]{f}).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryOpMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> $TYPE$_GENERATORS.stream().map(fa -> {
                    return new Object[] {fa, fm};
                })).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryOpShuffleProvider() {
        return INT_SHUFFLE_GENERATORS.stream().
                flatMap(fs -> $TYPE$_GENERATORS.stream().map(fa -> {
                    return new Object[] {fa, fs};
                })).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryOpShuffleMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> INT_SHUFFLE_GENERATORS.stream().
                    flatMap(fs -> $TYPE$_GENERATORS.stream().map(fa -> {
                        return new Object[] {fa, fs, fm};
                }))).
                toArray(Object[][]::new);
    }

#if[!Int]
    static final List<BiFunction<Integer,Integer,$type$[]>> $TYPE$_SHUFFLE_GENERATORS = List.of(
            withToStringBi("shuffle[random]", (Integer l, Integer m) -> {
                $type$[] a = new $type$[l];
                for (int i = 0; i < 1; i++) {
                    a[i] = ($type$)RAND.nextInt(m);
                }
                return a;
            })
    );

    @DataProvider
    public Object[][] $type$UnaryOpSelectFromProvider() {
        return $TYPE$_SHUFFLE_GENERATORS.stream().
                flatMap(fs -> $TYPE$_GENERATORS.stream().map(fa -> {
                    return new Object[] {fa, fs};
                })).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryOpSelectFromMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> $TYPE$_SHUFFLE_GENERATORS.stream().
                    flatMap(fs -> $TYPE$_GENERATORS.stream().map(fa -> {
                        return new Object[] {fa, fs, fm};
                }))).
                toArray(Object[][]::new);
    }

#end[!Int]

    @DataProvider
    public Object[][] $type$UnaryOpIndexProvider() {
        return INT_INDEX_GENERATORS.stream().
                flatMap(fs -> $TYPE$_GENERATORS.stream().map(fa -> {
                    return new Object[] {fa, fs};
                })).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$UnaryMaskedOpIndexProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
          flatMap(fs -> INT_INDEX_GENERATORS.stream().flatMap(fm ->
            $TYPE$_GENERATORS.stream().map(fa -> {
                    return new Object[] {fa, fm, fs};
            }))).
            toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] scatterMaskedOpIndexProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
          flatMap(fs -> INT_INDEX_GENERATORS.stream().flatMap(fm ->
            $TYPE$_GENERATORS.stream().flatMap(fn ->
              $TYPE$_GENERATORS.stream().map(fa -> {
                    return new Object[] {fa, fn, fm, fs};
            })))).
            toArray(Object[][]::new);
    }

    static final List<IntFunction<$type$[]>> $TYPE$_COMPARE_GENERATORS = List.of(
            withToString("$type$[i]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> ($type$)i);
            }),
            withToString("$type$[i + 1]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> ($type$)(i + 1));
            }),
            withToString("$type$[i - 2]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> ($type$)(i - 2));
            }),
            withToString("$type$[zigZag(i)]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> i%3 == 0 ? ($type$)i : (i%3 == 1 ? ($type$)(i + 1) : ($type$)(i - 2)));
            }),
            withToString("$type$[cornerCaseValue(i)]", (int s) -> {
                return fill(s * BUFFER_REPS,
                            i -> cornerCaseValue(i));
            })
    );

    static final List<List<IntFunction<$type$[]>>> $TYPE$_TEST_GENERATOR_ARGS =
        $TYPE$_COMPARE_GENERATORS.stream().
                map(fa -> List.of(fa)).
                collect(Collectors.toList());

    @DataProvider
    public Object[][] $type$TestOpProvider() {
        return $TYPE$_TEST_GENERATOR_ARGS.stream().map(List::toArray).
                toArray(Object[][]::new);
    }

    static final List<List<IntFunction<$type$[]>>> $TYPE$_COMPARE_GENERATOR_PAIRS =
        $TYPE$_COMPARE_GENERATORS.stream().
                flatMap(fa -> $TYPE$_COMPARE_GENERATORS.stream().map(fb -> List.of(fa, fb))).
                collect(Collectors.toList());

    @DataProvider
    public Object[][] $type$CompareOpProvider() {
        return $TYPE$_COMPARE_GENERATOR_PAIRS.stream().map(List::toArray).
                toArray(Object[][]::new);
    }

    @DataProvider
    public Object[][] $type$CompareOpMaskProvider() {
        return BOOLEAN_MASK_GENERATORS.stream().
                flatMap(fm -> $TYPE$_COMPARE_GENERATOR_PAIRS.stream().map(lfa -> {
                    return Stream.concat(lfa.stream(), Stream.of(fm)).toArray();
                })).
                toArray(Object[][]::new);
    }

    interface To$Type$F {
        $type$ apply(int i);
    }

    static $type$[] fill(int s , To$Type$F f) {
        return fill(new $type$[s], f);
    }

    static $type$[] fill($type$[] a, To$Type$F f) {
        for (int i = 0; i < a.length; i++) {
            a[i] = f.apply(i);
        }
        return a;
    }

    static $type$ cornerCaseValue(int i) {
#if[FP]
        switch(i % 7) {
            case 0:
                return $Wideboxtype$.MAX_VALUE;
            case 1:
                return $Wideboxtype$.MIN_VALUE;
            case 2:
                return $Wideboxtype$.NEGATIVE_INFINITY;
            case 3:
                return $Wideboxtype$.POSITIVE_INFINITY;
            case 4:
                return $Wideboxtype$.NaN;
            case 5:
                return ($type$)0.0;
            default:
                return ($type$)-0.0;
        }
#else[FP]
        switch(i % 5) {
            case 0:
                return $Wideboxtype$.MAX_VALUE;
            case 1:
                return $Wideboxtype$.MIN_VALUE;
            case 2:
                return $Wideboxtype$.MIN_VALUE;
            case 3:
                return $Wideboxtype$.MAX_VALUE;
            default:
                return ($type$)0;
        }
#end[FP]
    }
    static $type$ get($type$[] a, int i) {
        return ($type$) a[i];
    }

    static final IntFunction<$type$[]> fr = (vl) -> {
        int length = BUFFER_REPS * vl;
        return new $type$[length];
    };

    static final IntFunction<boolean[]> fmr = (vl) -> {
        int length = BUFFER_REPS * vl;
        return new boolean[length];
    };

#if[!Long]
    static final IntFunction<long[]> lfr = (vl) -> {
        int length = BUFFER_REPS * vl;
        return new long[length];
    };
#end[!Long]

#if[BITWISE]
    static void replaceZero($type$[] a, $type$ v) {
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
                a[i] = v;
            }
        }
    }

    static void replaceZero($type$[] a, boolean[] mask, $type$ v) {
        for (int i = 0; i < a.length; i++) {
            if (mask[i % mask.length] && a[i] == 0) {
                a[i] = v;
            }
        }
    }
#end[BITWISE]

    @Test
    static void smokeTest1() {
        $abstractvectortype$ three = $abstractvectortype$.broadcast(SPECIES, (byte)-3);
        $abstractvectortype$ three2 = ($abstractvectortype$) SPECIES.broadcast(-3);
        assert(three.eq(three2).allTrue());
        $abstractvectortype$ three3 = three2.broadcast(1).broadcast(-3);
        assert(three.eq(three3).allTrue());
        int scale = 2;
        Class<?> ETYPE = $type$.class;
        if (ETYPE == double.class || ETYPE == long.class)
            scale = 1000000;
        else if (ETYPE == byte.class && SPECIES.length() >= 64)
            scale = 1;
        $abstractvectortype$ higher = three.addIndex(scale);
        VectorMask<$Boxtype$> m = three.compare(VectorOperators.LE, higher);
        assert(m.allTrue());
        m = higher.min(($type$)-1).test(VectorOperators.IS_NEGATIVE);
        assert(m.allTrue());
#if[FP]
        m = higher.test(VectorOperators.IS_FINITE);
        assert(m.allTrue());
#end[FP]
        $type$ max = higher.reduceLanes(VectorOperators.MAX);
        assert(max == -3 + scale * (SPECIES.length()-1));
    }

    private static $type$[]
    bothToArray($abstractvectortype$ a, $abstractvectortype$ b) {
        $type$[] r = new $type$[a.length() + b.length()];
        a.intoArray(r, 0);
        b.intoArray(r, a.length());
        return r;
    }

    @Test
    static void smokeTest2() {
        // Do some zipping and shuffling.
        $abstractvectortype$ io = ($abstractvectortype$) SPECIES.broadcast(0).addIndex(1);
        $abstractvectortype$ io2 = ($abstractvectortype$) VectorShuffle.iota(SPECIES,0,1,false).toVector();
        Assert.assertEquals(io, io2);
        $abstractvectortype$ a = io.add(($type$)1); //[1,2]
        $abstractvectortype$ b = a.neg();  //[-1,-2]
        $type$[] abValues = bothToArray(a,b); //[1,2,-1,-2]
        VectorShuffle<$Boxtype$> zip0 = VectorShuffle.makeZip(SPECIES, 0);
        VectorShuffle<$Boxtype$> zip1 = VectorShuffle.makeZip(SPECIES, 1);
        $abstractvectortype$ zab0 = a.rearrange(zip0,b); //[1,-1]
        $abstractvectortype$ zab1 = a.rearrange(zip1,b); //[2,-2]
        $type$[] zabValues = bothToArray(zab0, zab1); //[1,-1,2,-2]
        // manually zip
        $type$[] manual = new $type$[zabValues.length];
        for (int i = 0; i < manual.length; i += 2) {
            manual[i+0] = abValues[i/2];
            manual[i+1] = abValues[a.length() + i/2];
        }
        Assert.assertEquals(Arrays.toString(zabValues), Arrays.toString(manual));
        VectorShuffle<$Boxtype$> unz0 = VectorShuffle.makeUnzip(SPECIES, 0);
        VectorShuffle<$Boxtype$> unz1 = VectorShuffle.makeUnzip(SPECIES, 1);
        $abstractvectortype$ uab0 = zab0.rearrange(unz0,zab1);
        $abstractvectortype$ uab1 = zab0.rearrange(unz1,zab1);
        $type$[] abValues1 = bothToArray(uab0, uab1);
        Assert.assertEquals(Arrays.toString(abValues), Arrays.toString(abValues1));
    }

    static void iotaShuffle() {
        $abstractvectortype$ io = ($abstractvectortype$) SPECIES.broadcast(0).addIndex(1);
        $abstractvectortype$ io2 = ($abstractvectortype$) VectorShuffle.iota(SPECIES, 0 , 1, false).toVector();
        Assert.assertEquals(io, io2);
    }

    @Test
    // Test all shuffle related operations.
    static void shuffleTest() {
        // To test backend instructions, make sure that C2 is used.
        for (int loop = 0; loop < INVOC_COUNT * INVOC_COUNT; loop++) {
            iotaShuffle();
        }
    }

    @Test
    void viewAsIntegeralLanesTest() {
#if[FP]
        Vector<?> asIntegral = SPECIES.zero().viewAsIntegralLanes();
        VectorSpecies<?> asIntegralSpecies = asIntegral.species();
        Assert.assertNotEquals(asIntegralSpecies.elementType(), SPECIES.elementType());
        Assert.assertEquals(asIntegralSpecies.vectorShape(), SPECIES.vectorShape());
        Assert.assertEquals(asIntegralSpecies.length(), SPECIES.length());
        Assert.assertEquals(asIntegral.viewAsFloatingLanes().species(), SPECIES);
#else[FP]
        Vector<?> asIntegral = SPECIES.zero().viewAsIntegralLanes();
        Assert.assertEquals(asIntegral.species(), SPECIES);
#end[FP]
    }

#if[FP]
    @Test
    void viewAsFloatingLanesTest() {
        Vector<?> asFloating = SPECIES.zero().viewAsFloatingLanes();
        Assert.assertEquals(asFloating.species(), SPECIES);
    }
#else[FP]
#if[byteOrShort]
    @Test(expectedExceptions = UnsupportedOperationException.class)
    void viewAsFloatingLanesTest() {
        SPECIES.zero().viewAsFloatingLanes();
    }
#else[byteOrShort]
    @Test
    void viewAsFloatingLanesTest() {
        Vector<?> asFloating = SPECIES.zero().viewAsFloatingLanes();
        VectorSpecies<?> asFloatingSpecies = asFloating.species();
        Assert.assertNotEquals(asFloatingSpecies.elementType(), SPECIES.elementType());
        Assert.assertEquals(asFloatingSpecies.vectorShape(), SPECIES.vectorShape());
        Assert.assertEquals(asFloatingSpecies.length(), SPECIES.length());
        Assert.assertEquals(asFloating.viewAsIntegralLanes().species(), SPECIES);
    }
#end[byteOrShort]
#end[FP]

#if[BITWISE]
    @Test
    // Test div by 0.
    static void bitwiseDivByZeroSmokeTest() {
        try {
            $abstractvectortype$ a = ($abstractvectortype$) SPECIES.broadcast(0).addIndex(1);
            $abstractvectortype$ b = ($abstractvectortype$) SPECIES.broadcast(0);
            a.div(b);
            Assert.fail();
        } catch (ArithmeticException e) {
        }

        try {
            $abstractvectortype$ a = ($abstractvectortype$) SPECIES.broadcast(0).addIndex(1);
            $abstractvectortype$ b = ($abstractvectortype$) SPECIES.broadcast(0);
            VectorMask<$Boxtype$> m = a.lt(($type$) 1);
            a.div(b, m);
            Assert.fail();
        } catch (ArithmeticException e) {
        }
    }
#end[BITWISE]
    static $type$ ADD($type$ a, $type$ b) {
        return ($type$)(a + b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ADD$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ADD, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::ADD);
    }
    static $type$ add($type$ a, $type$ b) {
        return ($type$)(a + b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void add$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.add(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::add);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void ADD$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ADD, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::ADD);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void add$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.add(bv, vmask).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::add);
    }
    static $type$ SUB($type$ a, $type$ b) {
        return ($type$)(a - b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void SUB$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.SUB, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::SUB);
    }
    static $type$ sub($type$ a, $type$ b) {
        return ($type$)(a - b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void sub$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.sub(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::sub);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void SUB$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.SUB, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::SUB);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void sub$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.sub(bv, vmask).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::sub);
    }
    static $type$ MUL($type$ a, $type$ b) {
        return ($type$)(a * b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void MUL$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.MUL, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::MUL);
    }
    static $type$ mul($type$ a, $type$ b) {
        return ($type$)(a * b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void mul$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.mul(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::mul);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void MUL$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.MUL, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::MUL);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void mul$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.mul(bv, vmask).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::mul);
    }
#if[FP]

    static $type$ DIV($type$ a, $type$ b) {
        return ($type$)(a / b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void DIV$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.DIV, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::DIV);
    }
    static $type$ div($type$ a, $type$ b) {
        return ($type$)(a / b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void div$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.div(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::div);
    }
#end[FP]

#if[FP]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void DIV$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.DIV, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::DIV);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void div$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.div(bv, vmask).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::div);
    }
#end[FP]

#if[BITWISE]

    static $type$ DIV($type$ a, $type$ b) {
        return ($type$)(a / b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void DIV$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        replaceZero(b, ($type$) 1);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.DIV, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::DIV);
    }
    static $type$ div($type$ a, $type$ b) {
        return ($type$)(a / b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void div$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        replaceZero(b, ($type$) 1);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.div(bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::div);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void DIV$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        replaceZero(b, mask, ($type$) 1);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.DIV, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::DIV);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void div$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        replaceZero(b, mask, ($type$) 1);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.div(bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::div);
    }
#end[BITWISE]

    static $type$ FIRST_NONZERO($type$ a, $type$ b) {
        return ($type$)({#if[FP]?Double.doubleToLongBits}(a)!=0?a:b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void FIRST_NONZERO$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.FIRST_NONZERO, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::FIRST_NONZERO);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void FIRST_NONZERO$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.FIRST_NONZERO, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::FIRST_NONZERO);
    }
#if[BITWISE]

    static $type$ AND($type$ a, $type$ b) {
        return ($type$)(a & b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void AND$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.AND, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::AND);
    }
    static $type$ and($type$ a, $type$ b) {
        return ($type$)(a & b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void and$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.and(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::and);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void AND$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.AND, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::AND);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ AND_NOT($type$ a, $type$ b) {
        return ($type$)(a & ~b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void AND_NOT$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.AND_NOT, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::AND_NOT);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void AND_NOT$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.AND_NOT, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::AND_NOT);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ OR($type$ a, $type$ b) {
        return ($type$)(a | b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void OR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.OR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::OR);
    }
    static $type$ or($type$ a, $type$ b) {
        return ($type$)(a | b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void or$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.or(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::or);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void OR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.OR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::OR);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ XOR($type$ a, $type$ b) {
        return ($type$)(a ^ b);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void XOR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.XOR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::XOR);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void XOR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.XOR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::XOR);
    }
#end[BITWISE]


    @Test(dataProvider = "$type$BinaryOpProvider")
    static void add$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.add(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::add);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void add$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.add(b[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, mask, $vectorteststype$::add);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void sub$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.sub(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::sub);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void sub$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.sub(b[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, mask, $vectorteststype$::sub);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void mul$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.mul(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::mul);
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void mul$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.mul(b[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, mask, $vectorteststype$::mul);
    }
#if[FP]


    @Test(dataProvider = "$type$BinaryOpProvider")
    static void div$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.div(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::div);
    }
#end[FP]

#if[FP]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void div$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.div(b[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, mask, $vectorteststype$::div);
    }
#end[FP]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpProvider")
    static void div$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        replaceZero(b, ($type$) 1);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.div(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::div);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void div$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        replaceZero(b, ($type$) 1);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.div(b[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, mask, $vectorteststype$::div);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpProvider")
    static void OR$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.OR, b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::OR);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void or$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.or(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::or);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void OR$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.OR, b[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, mask, $vectorteststype$::OR);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpProvider")
    static void OR$vectorteststype$BroadcastLongSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);
        }

        assertBroadcastLongArraysEquals(a, b, r, $vectorteststype$::OR);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void OR$vectorteststype$BroadcastMaskedLongSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);
        }

        assertBroadcastLongArraysEquals(a, b, r, mask, $vectorteststype$::OR);
    }
#end[BITWISE]

#if[intOrLong]

    static $type$ LSHL($type$ a, $type$ b) {
        return ($type$)((a << b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHL$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHL, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::LSHL);
    }
#end[intOrLong]

#if[intOrLong]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHL$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHL, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::LSHL);
    }
#end[intOrLong]

#if[byte]

    static $type$ LSHL($type$ a, $type$ b) {
        return ($type$)((a << (b & 0x7)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHL$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHL, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::LSHL);
    }
#end[byte]

#if[byte]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHL$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHL, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::LSHL);
    }
#end[byte]

#if[short]

    static $type$ LSHL($type$ a, $type$ b) {
        return ($type$)((a << (b & 0xF)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHL$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHL, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::LSHL);
    }
#end[short]

#if[short]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHL$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHL, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::LSHL);
    }
#end[short]

#if[intOrLong]

    static $type$ ASHR($type$ a, $type$ b) {
        return ($type$)((a >> b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ASHR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ASHR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::ASHR);
    }
#end[intOrLong]

#if[intOrLong]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void ASHR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ASHR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::ASHR);
    }
#end[intOrLong]

#if[byte]

    static $type$ ASHR($type$ a, $type$ b) {
        return ($type$)((a >> (b & 0x7)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ASHR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ASHR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::ASHR);
    }
#end[byte]

#if[byte]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void ASHR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ASHR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::ASHR);
    }
#end[byte]

#if[short]

    static $type$ ASHR($type$ a, $type$ b) {
        return ($type$)((a >> (b & 0xF)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ASHR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ASHR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::ASHR);
    }
#end[short]

#if[short]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void ASHR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ASHR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::ASHR);
    }
#end[short]

#if[intOrLong]

    static $type$ LSHR($type$ a, $type$ b) {
        return ($type$)((a >>> b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::LSHR);
    }
#end[intOrLong]

#if[intOrLong]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::LSHR);
    }
#end[intOrLong]

#if[byte]

    static $type$ LSHR($type$ a, $type$ b) {
        return ($type$)(((a & 0xFF) >>> (b & 0x7)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::LSHR);
    }
#end[byte]

#if[byte]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::LSHR);
    }
#end[byte]

#if[short]

    static $type$ LSHR($type$ a, $type$ b) {
        return ($type$)(((a & 0xFFFF) >>> (b & 0xF)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHR$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHR, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::LSHR);
    }
#end[short]

#if[short]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHR$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.LSHR, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::LSHR);
    }
#end[short]

#if[intOrLong]

    static $type$ LSHL_unary($type$ a, $type$ b) {
        return ($type$)((a << b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHL$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::LSHL_unary);
    }
#end[intOrLong]

#if[intOrLong]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHL$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::LSHL_unary);
    }
#end[intOrLong]

#if[byte]

    static $type$ LSHL_unary($type$ a, $type$ b) {
        return ($type$)((a << (b & 7)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHL$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::LSHL_unary);
    }
#end[byte]

#if[byte]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHL$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::LSHL_unary);
    }
#end[byte]

#if[short]

    static $type$ LSHL_unary($type$ a, $type$ b) {
        return ($type$)((a << (b & 15)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHL$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::LSHL_unary);
    }
#end[short]

#if[short]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHL$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::LSHL_unary);
    }
#end[short]

#if[intOrLong]

    static $type$ LSHR_unary($type$ a, $type$ b) {
        return ($type$)((a >>> b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::LSHR_unary);
    }
#end[intOrLong]

#if[intOrLong]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::LSHR_unary);
    }
#end[intOrLong]

#if[byte]

    static $type$ LSHR_unary($type$ a, $type$ b) {
        return ($type$)(((a & 0xFF) >>> (b & 7)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::LSHR_unary);
    }
#end[byte]

#if[byte]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::LSHR_unary);
    }
#end[byte]

#if[short]

    static $type$ LSHR_unary($type$ a, $type$ b) {
        return ($type$)(((a & 0xFFFF) >>> (b & 15)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void LSHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::LSHR_unary);
    }
#end[short]

#if[short]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void LSHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::LSHR_unary);
    }
#end[short]

#if[intOrLong]

    static $type$ ASHR_unary($type$ a, $type$ b) {
        return ($type$)((a >> b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ASHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::ASHR_unary);
    }
#end[intOrLong]

#if[intOrLong]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void ASHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::ASHR_unary);
    }
#end[intOrLong]

#if[byte]

    static $type$ ASHR_unary($type$ a, $type$ b) {
        return ($type$)((a >> (b & 7)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ASHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::ASHR_unary);
    }
#end[byte]

#if[byte]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void ASHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::ASHR_unary);
    }
#end[byte]

#if[short]

    static $type$ ASHR_unary($type$ a, $type$ b) {
        return ($type$)((a >> (b & 15)));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ASHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, $vectorteststype$::ASHR_unary);
    }
#end[short]

#if[short]


    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void ASHR$vectorteststype$Shift(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);
            }
        }

        assertShiftArraysEquals(a, b, r, mask, $vectorteststype$::ASHR_unary);
    }
#end[short]

    static $type$ MIN($type$ a, $type$ b) {
        return ($type$)(Math.min(a, b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void MIN$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.MIN, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::MIN);
    }
    static $type$ min($type$ a, $type$ b) {
        return ($type$)(Math.min(a, b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void min$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.min(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::min);
    }
    static $type$ MAX($type$ a, $type$ b) {
        return ($type$)(Math.max(a, b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void MAX$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.MAX, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::MAX);
    }
    static $type$ max($type$ a, $type$ b) {
        return ($type$)(Math.max(a, b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void max$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.max(bv).intoArray(r, i);
        }

        assertArraysEquals(a, b, r, $vectorteststype$::max);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void MIN$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.MIN, b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::MIN);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void min$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.min(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::min);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void MAX$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.MAX, b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::MAX);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void max$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.max(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, r, $vectorteststype$::max);
    }
#if[BITWISE]

    static $type$ ANDReduce($type$[] a, int idx) {
        $type$ res = -1;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res &= a[i];
        }

        return res;
    }

    static $type$ ANDReduceAll($type$[] a) {
        $type$ res = -1;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res &= ANDReduce(a, i);
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ANDReduce$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        $type$ ra = -1;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.AND);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = -1;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra &= av.reduceLanes(VectorOperators.AND);
            }
        }

        assertReductionArraysEquals(a, r, ra,
                $vectorteststype$::ANDReduce, $vectorteststype$::ANDReduceAll);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ ANDReduceMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = -1;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if (mask[i % SPECIES.length()])
                res &= a[i];
        }

        return res;
    }

    static $type$ ANDReduceAllMasked($type$[] a, boolean[] mask) {
        $type$ res = -1;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res &= ANDReduceMasked(a, i, mask);
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void ANDReduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$ ra = -1;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.AND, vmask);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = -1;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra &= av.reduceLanes(VectorOperators.AND, vmask);
            }
        }

        assertReductionArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::ANDReduceMasked, $vectorteststype$::ANDReduceAllMasked);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ ORReduce($type$[] a, int idx) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res |= a[i];
        }

        return res;
    }

    static $type$ ORReduceAll($type$[] a) {
        $type$ res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res |= ORReduce(a, i);
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ORReduce$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        $type$ ra = 0;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.OR);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 0;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra |= av.reduceLanes(VectorOperators.OR);
            }
        }

        assertReductionArraysEquals(a, r, ra,
                $vectorteststype$::ORReduce, $vectorteststype$::ORReduceAll);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ ORReduceMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if (mask[i % SPECIES.length()])
                res |= a[i];
        }

        return res;
    }

    static $type$ ORReduceAllMasked($type$[] a, boolean[] mask) {
        $type$ res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res |= ORReduceMasked(a, i, mask);
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void ORReduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$ ra = 0;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.OR, vmask);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 0;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra |= av.reduceLanes(VectorOperators.OR, vmask);
            }
        }

        assertReductionArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::ORReduceMasked, $vectorteststype$::ORReduceAllMasked);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ XORReduce($type$[] a, int idx) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res ^= a[i];
        }

        return res;
    }

    static $type$ XORReduceAll($type$[] a) {
        $type$ res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res ^= XORReduce(a, i);
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void XORReduce$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        $type$ ra = 0;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.XOR);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 0;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra ^= av.reduceLanes(VectorOperators.XOR);
            }
        }

        assertReductionArraysEquals(a, r, ra,
                $vectorteststype$::XORReduce, $vectorteststype$::XORReduceAll);
    }
#end[BITWISE]

#if[BITWISE]

    static $type$ XORReduceMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if (mask[i % SPECIES.length()])
                res ^= a[i];
        }

        return res;
    }

    static $type$ XORReduceAllMasked($type$[] a, boolean[] mask) {
        $type$ res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res ^= XORReduceMasked(a, i, mask);
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void XORReduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$ ra = 0;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.XOR, vmask);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 0;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra ^= av.reduceLanes(VectorOperators.XOR, vmask);
            }
        }

        assertReductionArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::XORReduceMasked, $vectorteststype$::XORReduceAllMasked);
    }
#end[BITWISE]

    static $type$ ADDReduce($type$[] a, int idx) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res += a[i];
        }

        return res;
    }

    static $type$ ADDReduceAll($type$[] a) {
        $type$ res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res += ADDReduce(a, i);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ADDReduce$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        $type$ ra = 0;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.ADD);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 0;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra += av.reduceLanes(VectorOperators.ADD);
            }
        }

        assertReductionArraysEquals(a, r, ra,
                $vectorteststype$::ADDReduce, $vectorteststype$::ADDReduceAll);
    }
    static $type$ ADDReduceMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if (mask[i % SPECIES.length()])
                res += a[i];
        }

        return res;
    }

    static $type$ ADDReduceAllMasked($type$[] a, boolean[] mask) {
        $type$ res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res += ADDReduceMasked(a, i, mask);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void ADDReduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$ ra = 0;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.ADD, vmask);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 0;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra += av.reduceLanes(VectorOperators.ADD, vmask);
            }
        }

        assertReductionArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::ADDReduceMasked, $vectorteststype$::ADDReduceAllMasked);
    }
    static $type$ MULReduce($type$[] a, int idx) {
        $type$ res = 1;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res *= a[i];
        }

        return res;
    }

    static $type$ MULReduceAll($type$[] a) {
        $type$ res = 1;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res *= MULReduce(a, i);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpProvider")
    static void MULReduce$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        $type$ ra = 1;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.MUL);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 1;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra *= av.reduceLanes(VectorOperators.MUL);
            }
        }

        assertReductionArraysEquals(a, r, ra,
                $vectorteststype$::MULReduce, $vectorteststype$::MULReduceAll);
    }
    static $type$ MULReduceMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = 1;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if (mask[i % SPECIES.length()])
                res *= a[i];
        }

        return res;
    }

    static $type$ MULReduceAllMasked($type$[] a, boolean[] mask) {
        $type$ res = 1;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res *= MULReduceMasked(a, i, mask);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void MULReduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$ ra = 1;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.MUL, vmask);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = 1;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra *= av.reduceLanes(VectorOperators.MUL, vmask);
            }
        }

        assertReductionArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::MULReduceMasked, $vectorteststype$::MULReduceAllMasked);
    }
    static $type$ MINReduce($type$[] a, int idx) {
        $type$ res = $Wideboxtype$.$MaxValue$;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res = ($type$)Math.min(res, a[i]);
        }

        return res;
    }

    static $type$ MINReduceAll($type$[] a) {
        $type$ res = $Wideboxtype$.$MaxValue$;
        for (int i = 0; i < a.length; i++) {
            res = ($type$)Math.min(res, a[i]);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpProvider")
    static void MINReduce$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        $type$ ra = $Wideboxtype$.$MaxValue$;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.MIN);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = $Wideboxtype$.$MaxValue$;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra = ($type$)Math.min(ra, av.reduceLanes(VectorOperators.MIN));
            }
        }

        assertReductionArraysEquals(a, r, ra,
                $vectorteststype$::MINReduce, $vectorteststype$::MINReduceAll);
    }
    static $type$ MINReduceMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = $Wideboxtype$.$MaxValue$;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if(mask[i % SPECIES.length()])
                res = ($type$)Math.min(res, a[i]);
        }

        return res;
    }

    static $type$ MINReduceAllMasked($type$[] a, boolean[] mask) {
        $type$ res = $Wideboxtype$.$MaxValue$;
        for (int i = 0; i < a.length; i++) {
            if(mask[i % SPECIES.length()])
                res = ($type$)Math.min(res, a[i]);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void MINReduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$ ra = $Wideboxtype$.$MaxValue$;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = $Wideboxtype$.$MaxValue$;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra = ($type$)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));
            }
        }

        assertReductionArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::MINReduceMasked, $vectorteststype$::MINReduceAllMasked);
    }
    static $type$ MAXReduce($type$[] a, int idx) {
        $type$ res = $Wideboxtype$.$MinValue$;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res = ($type$)Math.max(res, a[i]);
        }

        return res;
    }

    static $type$ MAXReduceAll($type$[] a) {
        $type$ res = $Wideboxtype$.$MinValue$;
        for (int i = 0; i < a.length; i++) {
            res = ($type$)Math.max(res, a[i]);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpProvider")
    static void MAXReduce$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        $type$ ra = $Wideboxtype$.$MinValue$;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.MAX);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = $Wideboxtype$.$MinValue$;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra = ($type$)Math.max(ra, av.reduceLanes(VectorOperators.MAX));
            }
        }

        assertReductionArraysEquals(a, r, ra,
                $vectorteststype$::MAXReduce, $vectorteststype$::MAXReduceAll);
    }
    static $type$ MAXReduceMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = $Wideboxtype$.$MinValue$;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if(mask[i % SPECIES.length()])
                res = ($type$)Math.max(res, a[i]);
        }

        return res;
    }

    static $type$ MAXReduceAllMasked($type$[] a, boolean[] mask) {
        $type$ res = $Wideboxtype$.$MinValue$;
        for (int i = 0; i < a.length; i++) {
            if(mask[i % SPECIES.length()])
                res = ($type$)Math.max(res, a[i]);
        }

        return res;
    }
    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void MAXReduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$ ra = $Wideboxtype$.$MinValue$;

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);
            }
        }

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            ra = $Wideboxtype$.$MinValue$;
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                ra = ($type$)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));
            }
        }

        assertReductionArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::MAXReduceMasked, $vectorteststype$::MAXReduceAllMasked);
    }
#if[BITWISE]

    static boolean anyTrue(boolean[] a, int idx) {
        boolean res = false;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res |= a[i];
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "boolUnaryOpProvider")
    static void anyTrue$vectorteststype$(IntFunction<boolean[]> fm) {
        boolean[] mask = fm.apply(SPECIES.length());
        boolean[] r = fmr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < mask.length; i += SPECIES.length()) {
                VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, i);
                r[i] = vmask.anyTrue();
            }
        }

        assertReductionBoolArraysEquals(mask, r, $vectorteststype$::anyTrue);
    }
#end[BITWISE]

#if[BITWISE]

    static boolean allTrue(boolean[] a, int idx) {
        boolean res = true;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res &= a[i];
        }

        return res;
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "boolUnaryOpProvider")
    static void allTrue$vectorteststype$(IntFunction<boolean[]> fm) {
        boolean[] mask = fm.apply(SPECIES.length());
        boolean[] r = fmr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < mask.length; i += SPECIES.length()) {
                VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, i);
                r[i] = vmask.allTrue();
            }
        }

        assertReductionBoolArraysEquals(mask, r, $vectorteststype$::allTrue);
    }
#end[BITWISE]


    @Test(dataProvider = "$type$UnaryOpProvider")
    static void with$vectorteststype$(IntFunction<$type$ []> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.withLane(0, ($type$)4).intoArray(r, i);
            }
        }

        assertInsertArraysEquals(a, r, ($type$)4, 0);
    }
    static boolean testIS_DEFAULT($type$ a) {
        return bits(a)==0;
    }

    @Test(dataProvider = "$type$TestOpProvider")
    static void IS_DEFAULT$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                VectorMask<$Wideboxtype$> mv = av.test(VectorOperators.IS_DEFAULT);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), testIS_DEFAULT(a[i + j]));
                }
            }
        }
    }

    static boolean testIS_NEGATIVE($type$ a) {
        return bits(a)<0;
    }

    @Test(dataProvider = "$type$TestOpProvider")
    static void IS_NEGATIVE$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                VectorMask<$Wideboxtype$> mv = av.test(VectorOperators.IS_NEGATIVE);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), testIS_NEGATIVE(a[i + j]));
                }
            }
        }
    }

#if[FP]

    static boolean testIS_FINITE($type$ a) {
        return $Boxtype$.isFinite(a);
    }

    @Test(dataProvider = "$type$TestOpProvider")
    static void IS_FINITE$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                VectorMask<$Wideboxtype$> mv = av.test(VectorOperators.IS_FINITE);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), testIS_FINITE(a[i + j]));
                }
            }
        }
    }

#end[FP]

#if[FP]

    static boolean testIS_NAN($type$ a) {
        return $Boxtype$.isNaN(a);
    }

    @Test(dataProvider = "$type$TestOpProvider")
    static void IS_NAN$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                VectorMask<$Wideboxtype$> mv = av.test(VectorOperators.IS_NAN);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), testIS_NAN(a[i + j]));
                }
            }
        }
    }

#end[FP]

#if[FP]

    static boolean testIS_INFINITE($type$ a) {
        return $Boxtype$.isInfinite(a);
    }

    @Test(dataProvider = "$type$TestOpProvider")
    static void IS_INFINITE$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                VectorMask<$Wideboxtype$> mv = av.test(VectorOperators.IS_INFINITE);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), testIS_INFINITE(a[i + j]));
                }
            }
        }
    }

#end[FP]


    @Test(dataProvider = "$type$CompareOpProvider")
    static void LT$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LT, bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] < b[i + j]);
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void lt$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.lt(bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] < b[i + j]);
                }
            }
        }
    }

    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void LT$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LT, bv, vmask);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < b[i + j]));
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void GT$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.GT, bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] > b[i + j]);
                }
            }
        }
    }

    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void GT$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.GT, bv, vmask);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] > b[i + j]));
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void EQ$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.EQ, bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] == b[i + j]);
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void eq$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.eq(bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] == b[i + j]);
                }
            }
        }
    }

    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void EQ$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.EQ, bv, vmask);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == b[i + j]));
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void NE$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.NE, bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] != b[i + j]);
                }
            }
        }
    }

    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void NE$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.NE, bv, vmask);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] != b[i + j]));
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void LE$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LE, bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] <= b[i + j]);
                }
            }
        }
    }

    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void LE$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LE, bv, vmask);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] <= b[i + j]));
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void GE$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.GE, bv);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), a[i + j] >= b[i + j]);
                }
            }
        }
    }

    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void GE$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.GE, bv, vmask);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] >= b[i + j]));
                }
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpProvider")
    static void LT$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LT, b[i]);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < b[i]);
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void LT$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa,
                                IntFunction<$type$[]> fb, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LT, b[i], vmask);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < b[i]));
            }
        }
    }

#if[!Long]
    @Test(dataProvider = "$type$CompareOpProvider")
    static void LT$vectorteststype$BroadcastLongSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LT, (long)b[i]);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < ($type$)((long)b[i]));
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void LT$vectorteststype$BroadcastLongMaskedSmokeTest(IntFunction<$type$[]> fa,
                                IntFunction<$type$[]> fb, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < ($type$)((long)b[i])));
            }
        }
    }
#end[!Long]

    @Test(dataProvider = "$type$CompareOpProvider")
    static void EQ$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.EQ, b[i]);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == b[i]);
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void EQ$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa,
                                IntFunction<$type$[]> fb, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.EQ, b[i], vmask);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == b[i]));
            }
        }
    }

#if[!Long]
    @Test(dataProvider = "$type$CompareOpProvider")
    static void EQ$vectorteststype$BroadcastLongSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.EQ, (long)b[i]);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == ($type$)((long)b[i]));
            }
        }
    }


    @Test(dataProvider = "$type$CompareOpMaskProvider")
    static void EQ$vectorteststype$BroadcastLongMaskedSmokeTest(IntFunction<$type$[]> fa,
                                IntFunction<$type$[]> fb, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());

        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == ($type$)((long)b[i])));
            }
        }
    }
#end[!Long]

    static $type$ blend($type$ a, $type$ b, boolean mask) {
        return mask ? b : a;
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void blend$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.blend(bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::blend);
    }

    @Test(dataProvider = "$type$UnaryOpShuffleProvider")
    static void Rearrange$vectorteststype$(IntFunction<$type$[]> fa,
                                           BiFunction<Integer,Integer,int[]> fs) {
        $type$[] a = fa.apply(SPECIES.length());
        int[] order = fs.apply(a.length, SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.rearrange(VectorShuffle.fromArray(SPECIES, order, i)).intoArray(r, i);
            }
        }

        assertRearrangeArraysEquals(a, r, order, SPECIES.length());
    }

    @Test(dataProvider = "$type$UnaryOpShuffleMaskProvider")
    static void Rearrange$vectorteststype$MaskedSmokeTest(IntFunction<$type$[]> fa,
                                                          BiFunction<Integer,Integer,int[]> fs,
                                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        int[] order = fs.apply(a.length, SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.rearrange(VectorShuffle.fromArray(SPECIES, order, i), vmask).intoArray(r, i);
        }

        assertRearrangeArraysEquals(a, r, order, mask, SPECIES.length());
    }
    @Test(dataProvider = "$type$UnaryOpProvider")
    static void get$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                int num_lanes = SPECIES.length();
                // Manually unroll because full unroll happens after intrinsification.
                // Unroll is needed because get intrinsic requires for index to be a known constant.
                if (num_lanes == 1) {
                    r[i]=av.lane(0);
                } else if (num_lanes == 2) {
                    r[i]=av.lane(0);
                    r[i+1]=av.lane(1);
                } else if (num_lanes == 4) {
                    r[i]=av.lane(0);
                    r[i+1]=av.lane(1);
                    r[i+2]=av.lane(2);
                    r[i+3]=av.lane(3);
                } else if (num_lanes == 8) {
                    r[i]=av.lane(0);
                    r[i+1]=av.lane(1);
                    r[i+2]=av.lane(2);
                    r[i+3]=av.lane(3);
                    r[i+4]=av.lane(4);
                    r[i+5]=av.lane(5);
                    r[i+6]=av.lane(6);
                    r[i+7]=av.lane(7);
                } else if (num_lanes == 16) {
                    r[i]=av.lane(0);
                    r[i+1]=av.lane(1);
                    r[i+2]=av.lane(2);
                    r[i+3]=av.lane(3);
                    r[i+4]=av.lane(4);
                    r[i+5]=av.lane(5);
                    r[i+6]=av.lane(6);
                    r[i+7]=av.lane(7);
                    r[i+8]=av.lane(8);
                    r[i+9]=av.lane(9);
                    r[i+10]=av.lane(10);
                    r[i+11]=av.lane(11);
                    r[i+12]=av.lane(12);
                    r[i+13]=av.lane(13);
                    r[i+14]=av.lane(14);
                    r[i+15]=av.lane(15);
                } else if (num_lanes == 32) {
                    r[i]=av.lane(0);
                    r[i+1]=av.lane(1);
                    r[i+2]=av.lane(2);
                    r[i+3]=av.lane(3);
                    r[i+4]=av.lane(4);
                    r[i+5]=av.lane(5);
                    r[i+6]=av.lane(6);
                    r[i+7]=av.lane(7);
                    r[i+8]=av.lane(8);
                    r[i+9]=av.lane(9);
                    r[i+10]=av.lane(10);
                    r[i+11]=av.lane(11);
                    r[i+12]=av.lane(12);
                    r[i+13]=av.lane(13);
                    r[i+14]=av.lane(14);
                    r[i+15]=av.lane(15);
                    r[i+16]=av.lane(16);
                    r[i+17]=av.lane(17);
                    r[i+18]=av.lane(18);
                    r[i+19]=av.lane(19);
                    r[i+20]=av.lane(20);
                    r[i+21]=av.lane(21);
                    r[i+22]=av.lane(22);
                    r[i+23]=av.lane(23);
                    r[i+24]=av.lane(24);
                    r[i+25]=av.lane(25);
                    r[i+26]=av.lane(26);
                    r[i+27]=av.lane(27);
                    r[i+28]=av.lane(28);
                    r[i+29]=av.lane(29);
                    r[i+30]=av.lane(30);
                    r[i+31]=av.lane(31);
                } else if (num_lanes == 64) {
                    r[i]=av.lane(0);
                    r[i+1]=av.lane(1);
                    r[i+2]=av.lane(2);
                    r[i+3]=av.lane(3);
                    r[i+4]=av.lane(4);
                    r[i+5]=av.lane(5);
                    r[i+6]=av.lane(6);
                    r[i+7]=av.lane(7);
                    r[i+8]=av.lane(8);
                    r[i+9]=av.lane(9);
                    r[i+10]=av.lane(10);
                    r[i+11]=av.lane(11);
                    r[i+12]=av.lane(12);
                    r[i+13]=av.lane(13);
                    r[i+14]=av.lane(14);
                    r[i+15]=av.lane(15);
                    r[i+16]=av.lane(16);
                    r[i+17]=av.lane(17);
                    r[i+18]=av.lane(18);
                    r[i+19]=av.lane(19);
                    r[i+20]=av.lane(20);
                    r[i+21]=av.lane(21);
                    r[i+22]=av.lane(22);
                    r[i+23]=av.lane(23);
                    r[i+24]=av.lane(24);
                    r[i+25]=av.lane(25);
                    r[i+26]=av.lane(26);
                    r[i+27]=av.lane(27);
                    r[i+28]=av.lane(28);
                    r[i+29]=av.lane(29);
                    r[i+30]=av.lane(30);
                    r[i+31]=av.lane(31);
                    r[i+32]=av.lane(32);
                    r[i+33]=av.lane(33);
                    r[i+34]=av.lane(34);
                    r[i+35]=av.lane(35);
                    r[i+36]=av.lane(36);
                    r[i+37]=av.lane(37);
                    r[i+38]=av.lane(38);
                    r[i+39]=av.lane(39);
                    r[i+40]=av.lane(40);
                    r[i+41]=av.lane(41);
                    r[i+42]=av.lane(42);
                    r[i+43]=av.lane(43);
                    r[i+44]=av.lane(44);
                    r[i+45]=av.lane(45);
                    r[i+46]=av.lane(46);
                    r[i+47]=av.lane(47);
                    r[i+48]=av.lane(48);
                    r[i+49]=av.lane(49);
                    r[i+50]=av.lane(50);
                    r[i+51]=av.lane(51);
                    r[i+52]=av.lane(52);
                    r[i+53]=av.lane(53);
                    r[i+54]=av.lane(54);
                    r[i+55]=av.lane(55);
                    r[i+56]=av.lane(56);
                    r[i+57]=av.lane(57);
                    r[i+58]=av.lane(58);
                    r[i+59]=av.lane(59);
                    r[i+60]=av.lane(60);
                    r[i+61]=av.lane(61);
                    r[i+62]=av.lane(62);
                    r[i+63]=av.lane(63);
                } else {
                    for (int j = 0; j < SPECIES.length(); j++) {
                        r[i+j]=av.lane(j);
                    }
                }
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::get);
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void Broadcast$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$.broadcast(SPECIES, a[i]).intoArray(r, i);
            }
        }

        assertBroadcastArraysEquals(a, r);
    }





    @Test(dataProvider = "$type$UnaryOpProvider")
    static void Zero$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$.zero(SPECIES).intoArray(a, i);
            }
        }

        Assert.assertEquals(a, r);
    }




    static $type$[] sliceUnary($type$[] a, int origin, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0; i < SPECIES.length(); i++){
            if(i+origin < SPECIES.length())
                res[i] = a[idx+i+origin];
            else
                res[i] = ($type$)0;
        }
        return res;
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void sliceUnary$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];
        int origin = (new java.util.Random()).nextInt(SPECIES.length());
        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.slice(origin).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, origin, $vectorteststype$::sliceUnary);
    }
    static $type$[] sliceBinary($type$[] a, $type$[] b, int origin, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0, j = 0; i < SPECIES.length(); i++){
            if(i+origin < SPECIES.length())
                res[i] = a[idx+i+origin];
            else {
                res[i] = b[idx+j];
                j++;
            }
        }
        return res;
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void sliceBinary$vectorteststype$Binary(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];
        int origin = (new java.util.Random()).nextInt(SPECIES.length());
        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.slice(origin, bv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, origin, $vectorteststype$::sliceBinary);
    }
    static $type$[] slice($type$[] a, $type$[] b, int origin, boolean[] mask, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0, j = 0; i < SPECIES.length(); i++){
            if(i+origin < SPECIES.length())
                res[i] = mask[i] ? a[idx+i+origin] : ($type$)0;
            else {
                res[i] = mask[i] ? b[idx+j] : ($type$)0;
                j++;
            }
        }
        return res;
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void slice$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
    IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        $type$[] r = new $type$[a.length];
        int origin = (new java.util.Random()).nextInt(SPECIES.length());
        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.slice(origin, bv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, origin, mask, $vectorteststype$::slice);
    }
    static $type$[] unsliceUnary($type$[] a, int origin, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0, j = 0; i < SPECIES.length(); i++){
            if(i < origin)
                res[i] = ($type$)0;
            else {
                res[i] = a[idx+j];
                j++;
            }
        }
        return res;
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void unsliceUnary$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];
        int origin = (new java.util.Random()).nextInt(SPECIES.length());
        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.unslice(origin).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, origin, $vectorteststype$::unsliceUnary);
    }
    static $type$[] unsliceBinary($type$[] a, $type$[] b, int origin, int part, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0, j = 0; i < SPECIES.length(); i++){
            if (part == 0) {
                if (i < origin)
                    res[i] = b[idx+i];
                else {
                    res[i] = a[idx+j];
                    j++;
                }
            } else if (part == 1) {
                if (i < origin)
                    res[i] = a[idx+SPECIES.length()-origin+i];
                else {
                    res[i] = b[idx+origin+j];
                    j++;
                }
            }
        }
        return res;
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void unsliceBinary$vectorteststype$Binary(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = new $type$[a.length];
        int origin = (new java.util.Random()).nextInt(SPECIES.length());
        int part = (new java.util.Random()).nextInt(2);
        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.unslice(origin, bv, part).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, origin, part, $vectorteststype$::unsliceBinary);
    }
    static $type$[] unslice($type$[] a, $type$[] b, int origin, int part, boolean[] mask, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0, j = 0; i < SPECIES.length(); i++){
            if(i+origin < SPECIES.length())
                res[i] = b[idx+i+origin];
            else {
                res[i] = b[idx+j];
                j++;
            }
        }
        for (int i = 0; i < SPECIES.length(); i++){
            res[i] = mask[i] ? a[idx+i] : res[i];
        }
        $type$[] res1 = new $type$[SPECIES.length()];
        if (part == 0) {
            for (int i = 0, j = 0; i < SPECIES.length(); i++){
                if (i < origin)
                    res1[i] = b[idx+i];
                else {
                   res1[i] = res[j];
                   j++;
                }
            }
        } else if (part == 1) {
            for (int i = 0, j = 0; i < SPECIES.length(); i++){
                if (i < origin)
                    res1[i] = res[SPECIES.length()-origin+i];
                else {
                    res1[i] = b[idx+origin+j];
                    j++;
                }
            }
        }
        return res1;
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void unslice$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
    IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        $type$[] r = new $type$[a.length];
        int origin = (new java.util.Random()).nextInt(SPECIES.length());
        int part = (new java.util.Random()).nextInt(2);
        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.unslice(origin, bv, part, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, origin, part, mask, $vectorteststype$::unslice);
    }
#if[FP]

    static $type$ SIN($type$ a) {
        return ($type$)(Math.sin((double)a));
    }

    static $type$ strictSIN($type$ a) {
        return ($type$)(StrictMath.sin((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void SIN$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.SIN).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::SIN, $vectorteststype$::strictSIN);
    }
#end[FP]

#if[FP]

    static $type$ EXP($type$ a) {
        return ($type$)(Math.exp((double)a));
    }

    static $type$ strictEXP($type$ a) {
        return ($type$)(StrictMath.exp((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void EXP$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.EXP).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::EXP, $vectorteststype$::strictEXP);
    }
#end[FP]

#if[FP]

    static $type$ LOG1P($type$ a) {
        return ($type$)(Math.log1p((double)a));
    }

    static $type$ strictLOG1P($type$ a) {
        return ($type$)(StrictMath.log1p((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void LOG1P$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LOG1P).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::LOG1P, $vectorteststype$::strictLOG1P);
    }
#end[FP]

#if[FP]

    static $type$ LOG($type$ a) {
        return ($type$)(Math.log((double)a));
    }

    static $type$ strictLOG($type$ a) {
        return ($type$)(StrictMath.log((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void LOG$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LOG).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::LOG, $vectorteststype$::strictLOG);
    }
#end[FP]

#if[FP]

    static $type$ LOG10($type$ a) {
        return ($type$)(Math.log10((double)a));
    }

    static $type$ strictLOG10($type$ a) {
        return ($type$)(StrictMath.log10((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void LOG10$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.LOG10).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::LOG10, $vectorteststype$::strictLOG10);
    }
#end[FP]

#if[FP]

    static $type$ EXPM1($type$ a) {
        return ($type$)(Math.expm1((double)a));
    }

    static $type$ strictEXPM1($type$ a) {
        return ($type$)(StrictMath.expm1((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void EXPM1$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.EXPM1).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::EXPM1, $vectorteststype$::strictEXPM1);
    }
#end[FP]

#if[FP]

    static $type$ COS($type$ a) {
        return ($type$)(Math.cos((double)a));
    }

    static $type$ strictCOS($type$ a) {
        return ($type$)(StrictMath.cos((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void COS$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.COS).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::COS, $vectorteststype$::strictCOS);
    }
#end[FP]

#if[FP]

    static $type$ TAN($type$ a) {
        return ($type$)(Math.tan((double)a));
    }

    static $type$ strictTAN($type$ a) {
        return ($type$)(StrictMath.tan((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void TAN$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.TAN).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::TAN, $vectorteststype$::strictTAN);
    }
#end[FP]

#if[FP]

    static $type$ SINH($type$ a) {
        return ($type$)(Math.sinh((double)a));
    }

    static $type$ strictSINH($type$ a) {
        return ($type$)(StrictMath.sinh((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void SINH$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.SINH).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::SINH, $vectorteststype$::strictSINH);
    }
#end[FP]

#if[FP]

    static $type$ COSH($type$ a) {
        return ($type$)(Math.cosh((double)a));
    }

    static $type$ strictCOSH($type$ a) {
        return ($type$)(StrictMath.cosh((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void COSH$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.COSH).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::COSH, $vectorteststype$::strictCOSH);
    }
#end[FP]

#if[FP]

    static $type$ TANH($type$ a) {
        return ($type$)(Math.tanh((double)a));
    }

    static $type$ strictTANH($type$ a) {
        return ($type$)(StrictMath.tanh((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void TANH$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.TANH).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::TANH, $vectorteststype$::strictTANH);
    }
#end[FP]

#if[FP]

    static $type$ ASIN($type$ a) {
        return ($type$)(Math.asin((double)a));
    }

    static $type$ strictASIN($type$ a) {
        return ($type$)(StrictMath.asin((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ASIN$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ASIN).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::ASIN, $vectorteststype$::strictASIN);
    }
#end[FP]

#if[FP]

    static $type$ ACOS($type$ a) {
        return ($type$)(Math.acos((double)a));
    }

    static $type$ strictACOS($type$ a) {
        return ($type$)(StrictMath.acos((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ACOS$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ACOS).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::ACOS, $vectorteststype$::strictACOS);
    }
#end[FP]

#if[FP]

    static $type$ ATAN($type$ a) {
        return ($type$)(Math.atan((double)a));
    }

    static $type$ strictATAN($type$ a) {
        return ($type$)(StrictMath.atan((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ATAN$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ATAN).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::ATAN, $vectorteststype$::strictATAN);
    }
#end[FP]

#if[FP]

    static $type$ CBRT($type$ a) {
        return ($type$)(Math.cbrt((double)a));
    }

    static $type$ strictCBRT($type$ a) {
        return ($type$)(StrictMath.cbrt((double)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void CBRT$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.CBRT).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, r, $vectorteststype$::CBRT, $vectorteststype$::strictCBRT);
    }
#end[FP]

#if[FP]

    static $type$ HYPOT($type$ a, $type$ b) {
        return ($type$)(Math.hypot((double)a, (double)b));
    }

    static $type$ strictHYPOT($type$ a, $type$ b) {
        return ($type$)(StrictMath.hypot((double)a, (double)b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void HYPOT$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.HYPOT, bv).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, b, r, $vectorteststype$::HYPOT, $vectorteststype$::strictHYPOT);
    }

#end[FP]

#if[FP]

    static $type$ POW($type$ a, $type$ b) {
        return ($type$)(Math.pow((double)a, (double)b));
    }

    static $type$ strictPOW($type$ a, $type$ b) {
        return ($type$)(StrictMath.pow((double)a, (double)b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void POW$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.POW, bv).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, b, r, $vectorteststype$::POW, $vectorteststype$::strictPOW);
    }

    static $type$ pow($type$ a, $type$ b) {
        return ($type$)(Math.pow((double)a, (double)b));
    }

    static $type$ strictpow($type$ a, $type$ b) {
        return ($type$)(StrictMath.pow((double)a, (double)b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void pow$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.pow(bv).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, b, r, $vectorteststype$::pow, $vectorteststype$::strictpow);
    }

#end[FP]

#if[FP]

    static $type$ ATAN2($type$ a, $type$ b) {
        return ($type$)(Math.atan2((double)a, (double)b));
    }

    static $type$ strictATAN2($type$ a, $type$ b) {
        return ($type$)(StrictMath.atan2((double)a, (double)b));
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void ATAN2$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                av.lanewise(VectorOperators.ATAN2, bv).intoArray(r, i);
            }
        }

        assertArraysEqualsWithinOneUlp(a, b, r, $vectorteststype$::ATAN2, $vectorteststype$::strictATAN2);
    }

#end[FP]

#if[FP]

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void POW$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.POW, b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEqualsWithinOneUlp(a, b, r, $vectorteststype$::POW, $vectorteststype$::strictPOW);
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void pow$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.pow(b[i]).intoArray(r, i);
        }

        assertBroadcastArraysEqualsWithinOneUlp(a, b, r, $vectorteststype$::pow, $vectorteststype$::strictpow);
    }

#end[FP]

#if[FP]

    static $type$ FMA($type$ a, $type$ b, $type$ c) {
        return ($type$)(Math.fma(a, b, c));
    }
    static $type$ fma($type$ a, $type$ b, $type$ c) {
        return ($type$)(Math.fma(a, b, c));
    }
#end[FP]

#if[FP]

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void FMA$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("FMA") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
                av.lanewise(VectorOperators.FMA, bv, cv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, c, r, $vectorteststype$::FMA);
    }
    @Test(dataProvider = "$type$TernaryOpProvider")
    static void fma$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("fma") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
            av.fma(bv, cv).intoArray(r, i);
        }

        assertArraysEquals(a, b, c, r, $vectorteststype$::fma);
    }
#end[FP]

#if[FP]

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void FMA$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
#if[double]
        int count = INVOC_COUNT;
        switch ("FMA") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
                av.lanewise(VectorOperators.FMA, bv, cv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, c, r, mask, $vectorteststype$::FMA);
    }
#end[FP]

#if[BITWISE]

    static $type$ BITWISE_BLEND($type$ a, $type$ b, $type$ c) {
        return ($type$)((a&~(c))|(b&c));
    }
    static $type$ bitwiseBlend($type$ a, $type$ b, $type$ c) {
        return ($type$)((a&~(c))|(b&c));
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void BITWISE_BLEND$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("BITWISE_BLEND") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
                av.lanewise(VectorOperators.BITWISE_BLEND, bv, cv).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, c, r, $vectorteststype$::BITWISE_BLEND);
    }
    @Test(dataProvider = "$type$TernaryOpProvider")
    static void bitwiseBlend$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("bitwiseBlend") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
            av.bitwiseBlend(bv, cv).intoArray(r, i);
        }

        assertArraysEquals(a, b, c, r, $vectorteststype$::bitwiseBlend);
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void BITWISE_BLEND$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
#if[double]
        int count = INVOC_COUNT;
        switch ("BITWISE_BLEND") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
                $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
                av.lanewise(VectorOperators.BITWISE_BLEND, bv, cv, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, c, r, mask, $vectorteststype$::BITWISE_BLEND);
    }
#end[BITWISE]

#if[FP]

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void FMA$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.lanewise(VectorOperators.FMA, bv, c[i]).intoArray(r, i);
        }
        assertBroadcastArraysEquals(a, b, c, r, $vectorteststype$::FMA);
    }

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void FMA$vectorteststype$AltBroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
            av.lanewise(VectorOperators.FMA, b[i], cv).intoArray(r, i);
        }
        assertAltBroadcastArraysEquals(a, b, c, r, $vectorteststype$::FMA);
    }
#end[FP]

#if[FP]

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void FMA$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.lanewise(VectorOperators.FMA, bv, c[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, c, r, mask, $vectorteststype$::FMA);
    }

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void FMA$vectorteststype$AltBroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
            av.lanewise(VectorOperators.FMA, b[i], cv, vmask).intoArray(r, i);
        }

        assertAltBroadcastArraysEquals(a, b, c, r, mask, $vectorteststype$::FMA);
    }
#end[FP]

#if[BITWISE]

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void BITWISE_BLEND$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.lanewise(VectorOperators.BITWISE_BLEND, bv, c[i]).intoArray(r, i);
        }
        assertBroadcastArraysEquals(a, b, c, r, $vectorteststype$::BITWISE_BLEND);
    }

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void BITWISE_BLEND$vectorteststype$AltBroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
            av.lanewise(VectorOperators.BITWISE_BLEND, b[i], cv).intoArray(r, i);
        }
        assertAltBroadcastArraysEquals(a, b, c, r, $vectorteststype$::BITWISE_BLEND);
    }
    @Test(dataProvider = "$type$TernaryOpProvider")
    static void bitwiseBlend$vectorteststype$BroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.bitwiseBlend(bv, c[i]).intoArray(r, i);
        }
        assertBroadcastArraysEquals(a, b, c, r, $vectorteststype$::bitwiseBlend);
    }

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void bitwiseBlend$vectorteststype$AltBroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
            av.bitwiseBlend(b[i], cv).intoArray(r, i);
        }
        assertAltBroadcastArraysEquals(a, b, c, r, $vectorteststype$::bitwiseBlend);
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void BITWISE_BLEND$vectorteststype$BroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);
            av.lanewise(VectorOperators.BITWISE_BLEND, bv, c[i], vmask).intoArray(r, i);
        }

        assertBroadcastArraysEquals(a, b, c, r, mask, $vectorteststype$::BITWISE_BLEND);
    }

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void BITWISE_BLEND$vectorteststype$AltBroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ cv = $abstractvectortype$.fromArray(SPECIES, c, i);
            av.lanewise(VectorOperators.BITWISE_BLEND, b[i], cv, vmask).intoArray(r, i);
        }

        assertAltBroadcastArraysEquals(a, b, c, r, mask, $vectorteststype$::BITWISE_BLEND);
    }
#end[BITWISE]

#if[FP]

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void FMA$vectorteststype$DoubleBroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("FMA") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.FMA, b[i], c[i]).intoArray(r, i);
        }

        assertDoubleBroadcastArraysEquals(a, b, c, r, $vectorteststype$::FMA);
    }
    @Test(dataProvider = "$type$TernaryOpProvider")
    static void fma$vectorteststype$DoubleBroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("fma") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.fma(b[i], c[i]).intoArray(r, i);
        }

        assertDoubleBroadcastArraysEquals(a, b, c, r, $vectorteststype$::fma);
    }
#end[FP]

#if[FP]

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void FMA$vectorteststype$DoubleBroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
#if[double]
        int count = INVOC_COUNT;
        switch ("FMA") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.FMA, b[i], c[i], vmask).intoArray(r, i);
        }

        assertDoubleBroadcastArraysEquals(a, b, c, r, mask, $vectorteststype$::FMA);
    }
#end[FP]

#if[BITWISE]

    @Test(dataProvider = "$type$TernaryOpProvider")
    static void BITWISE_BLEND$vectorteststype$DoubleBroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("BITWISE_BLEND") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.BITWISE_BLEND, b[i], c[i]).intoArray(r, i);
        }

        assertDoubleBroadcastArraysEquals(a, b, c, r, $vectorteststype$::BITWISE_BLEND);
    }
    @Test(dataProvider = "$type$TernaryOpProvider")
    static void bitwiseBlend$vectorteststype$DoubleBroadcastSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, IntFunction<$type$[]> fc) {
#if[double]
        int count = INVOC_COUNT;
        switch ("bitwiseBlend") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.bitwiseBlend(b[i], c[i]).intoArray(r, i);
        }

        assertDoubleBroadcastArraysEquals(a, b, c, r, $vectorteststype$::bitwiseBlend);
    }
#end[BITWISE]

#if[BITWISE]

    @Test(dataProvider = "$type$TernaryOpMaskProvider")
    static void BITWISE_BLEND$vectorteststype$DoubleBroadcastMaskedSmokeTest(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
                                          IntFunction<$type$[]> fc, IntFunction<boolean[]> fm) {
#if[double]
        int count = INVOC_COUNT;
        switch ("BITWISE_BLEND") {
        case "fma": case "lanewise_FMA":
           // Math.fma uses BigDecimal
           count = Math.max(5, count/20); break;
        }
        final int INVOC_COUNT = count;
#end[double]
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] b = fb.apply(SPECIES.length());
        $type$[] c = fc.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            av.lanewise(VectorOperators.BITWISE_BLEND, b[i], c[i], vmask).intoArray(r, i);
        }

        assertDoubleBroadcastArraysEquals(a, b, c, r, mask, $vectorteststype$::BITWISE_BLEND);
    }
#end[BITWISE]


    static $type$ NEG($type$ a) {
        return ($type$)(-(($type$)a));
    }

    static $type$ neg($type$ a) {
        return ($type$)(-(($type$)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void NEG$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.NEG).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::NEG);
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void neg$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.neg().intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::neg);
    }

    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void NEGMasked$vectorteststype$(IntFunction<$type$[]> fa,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.NEG, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, mask, $vectorteststype$::NEG);
    }

    static $type$ ABS($type$ a) {
        return ($type$)(Math.abs(($type$)a));
    }

    static $type$ abs($type$ a) {
        return ($type$)(Math.abs(($type$)a));
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ABS$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ABS).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::ABS);
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void abs$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.abs().intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::abs);
    }

    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void ABSMasked$vectorteststype$(IntFunction<$type$[]> fa,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ABS, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, mask, $vectorteststype$::ABS);
    }
#if[BITWISE]


    static $type$ NOT($type$ a) {
        return ($type$)(~(($type$)a));
    }

    static $type$ not($type$ a) {
        return ($type$)(~(($type$)a));
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$UnaryOpProvider")
    static void NOT$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.NOT).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::NOT);
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void not$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.not().intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::not);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void NOTMasked$vectorteststype$(IntFunction<$type$[]> fa,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.NOT, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, mask, $vectorteststype$::NOT);
    }
#end[BITWISE]

#if[BITWISE]


    static $type$ ZOMO($type$ a) {
        return ($type$)((a==0?0:-1));
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ZOMO$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ZOMO).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::ZOMO);
    }
#end[BITWISE]

#if[BITWISE]


    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void ZOMOMasked$vectorteststype$(IntFunction<$type$[]> fa,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.ZOMO, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, mask, $vectorteststype$::ZOMO);
    }
#end[BITWISE]

#if[FP]


    static $type$ SQRT($type$ a) {
        return ($type$)(Math.sqrt((double)a));
    }

    static $type$ sqrt($type$ a) {
        return ($type$)(Math.sqrt((double)a));
    }
#end[FP]

#if[FP]


    @Test(dataProvider = "$type$UnaryOpProvider")
    static void SQRT$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.SQRT).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::SQRT);
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void sqrt$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.sqrt().intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, $vectorteststype$::sqrt);
    }
#end[FP]

#if[FP]


    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void SQRTMasked$vectorteststype$(IntFunction<$type$[]> fa,
                                                IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.lanewise(VectorOperators.SQRT, vmask).intoArray(r, i);
            }
        }

        assertArraysEquals(a, r, mask, $vectorteststype$::SQRT);
    }
#end[FP]

    static $type$[] gather($type$ a[], int ix, int[] b, int iy) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0; i < SPECIES.length(); i++) {
            int bi = iy + i;
            res[i] = a[b[bi] + ix];
        }
        return res;
    }

    @Test(dataProvider = "$type$UnaryOpIndexProvider")
    static void gather$vectorteststype$(IntFunction<$type$[]> fa, BiFunction<Integer,Integer,int[]> fs) {
        $type$[] a = fa.apply(SPECIES.length());
        int[] b    = fs.apply(a.length, SPECIES.length());
        $type$[] r = new $type$[a.length];

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i, b, i);
                av.intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::gather);
    }
    static $type$[] gatherMasked($type$ a[], int ix, boolean[] mask, int[] b, int iy) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0; i < SPECIES.length(); i++) {
            int bi = iy + i;
            if (mask[i]) {
              res[i] = a[b[bi] + ix];
            }
        }
        return res;
    }

    @Test(dataProvider = "$type$UnaryMaskedOpIndexProvider")
    static void gatherMasked$vectorteststype$(IntFunction<$type$[]> fa, BiFunction<Integer,Integer,int[]> fs, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        int[] b    = fs.apply(a.length, SPECIES.length());
        $type$[] r = new $type$[a.length];
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i, b, i, vmask);
                av.intoArray(r, i);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::gatherMasked);
    }

    static $type$[] scatter($type$ a[], int ix, int[] b, int iy) {
      $type$[] res = new $type$[SPECIES.length()];
      for (int i = 0; i < SPECIES.length(); i++) {
        int bi = iy + i;
        res[b[bi]] = a[i + ix];
      }
      return res;
    }

    @Test(dataProvider = "$type$UnaryOpIndexProvider")
    static void scatter$vectorteststype$(IntFunction<$type$[]> fa, BiFunction<Integer,Integer,int[]> fs) {
        $type$[] a = fa.apply(SPECIES.length());
        int[] b = fs.apply(a.length, SPECIES.length());
        $type$[] r = new $type$[a.length];

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.intoArray(r, i, b, i);
            }
        }

        assertArraysEquals(a, b, r, $vectorteststype$::scatter);
    }

    static $type$[] scatterMasked($type$ r[], $type$ a[], int ix, boolean[] mask, int[] b, int iy) {
      // First, gather r.
      $type$[] oldVal = gather(r, ix, b, iy);
      $type$[] newVal = new $type$[SPECIES.length()];

      // Second, blending it with a.
      for (int i = 0; i < SPECIES.length(); i++) {
        newVal[i] = blend(oldVal[i], a[i+ix], mask[i]);
      }

      // Third, scatter: copy old value of r, and scatter it manually.
      $type$[] res = Arrays.copyOfRange(r, ix, ix+SPECIES.length());
      for (int i = 0; i < SPECIES.length(); i++) {
        int bi = iy + i;
        res[b[bi]] = newVal[i];
      }

      return res;
    }

    @Test(dataProvider = "scatterMaskedOpIndexProvider")
    static void scatterMasked$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb, BiFunction<Integer,Integer,int[]> fs, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        int[] b = fs.apply(a.length, SPECIES.length());
        $type$[] r = fb.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                av.intoArray(r, i, b, i, vmask);
            }
        }

        assertArraysEquals(a, b, r, mask, $vectorteststype$::scatterMasked);
    }

#if[!Long]

    static long ADDReduceLong($type$[] a, int idx) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            res += a[i];
        }

        return (long)res;
    }

    static long ADDReduceAllLong($type$[] a) {
        long res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res += ADDReduceLong(a, i);
        }

        return res;
    }

    @Test(dataProvider = "$type$UnaryOpProvider")
    static void ADDReduceLong$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());
        long[] r = lfr.apply(SPECIES.length());
        long ra = 0;

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            r[i] = av.reduceLanesToLong(VectorOperators.ADD);
        }

        ra = 0;
        for (int i = 0; i < a.length; i ++) {
            ra += r[i];
        }

        assertReductionLongArraysEquals(a, r, ra,
                $vectorteststype$::ADDReduceLong, $vectorteststype$::ADDReduceAllLong);
    }

    static long ADDReduceLongMasked($type$[] a, int idx, boolean[] mask) {
        $type$ res = 0;
        for (int i = idx; i < (idx + SPECIES.length()); i++) {
            if(mask[i % SPECIES.length()])
                res += a[i];
        }

        return (long)res;
    }

    static long ADDReduceAllLongMasked($type$[] a, boolean[] mask) {
        long res = 0;
        for (int i = 0; i < a.length; i += SPECIES.length()) {
            res += ADDReduceLongMasked(a, i, mask);
        }

        return res;
    }

    @Test(dataProvider = "$type$UnaryOpMaskProvider")
    static void ADDReduceLong$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        long[] r = lfr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);
        long ra = 0;

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            r[i] = av.reduceLanesToLong(VectorOperators.ADD, vmask);
        }

        ra = 0;
        for (int i = 0; i < a.length; i ++) {
            ra += r[i];
        }

        assertReductionLongArraysEqualsMasked(a, r, ra, mask,
                $vectorteststype$::ADDReduceLongMasked, $vectorteststype$::ADDReduceAllLongMasked);
    }
#end[!Long]

#if[Int]
    @Test(dataProvider = "$type$UnaryOpShuffleProvider")
#else[Int]
    @Test(dataProvider = "$type$UnaryOpSelectFromProvider")
#end[Int]
    static void SelectFrom$vectorteststype$(IntFunction<$type$[]> fa,
                                           BiFunction<Integer,Integer,$type$[]> fs) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] order = fs.apply(a.length, SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, order, i);
            bv.selectFrom(av).intoArray(r, i);
        }

        assertSelectFromArraysEquals(a, r, order, SPECIES.length());
    }

#if[Int]
    @Test(dataProvider = "$type$UnaryOpShuffleMaskProvider")
#else[Int]
    @Test(dataProvider = "$type$UnaryOpSelectFromMaskProvider")
#end[Int]
    static void SelectFrom$vectorteststype$MaskedSmokeTest(IntFunction<$type$[]> fa,
                                                           BiFunction<Integer,Integer,$type$[]> fs,
                                                           IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        $type$[] order = fs.apply(a.length, SPECIES.length());
        $type$[] r = fr.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, order, i);
            bv.selectFrom(av, vmask).intoArray(r, i);
        }

        assertSelectFromArraysEquals(a, r, order, mask, SPECIES.length());
    }

    @Test
    static void ElementSize$vectorteststype$() {
        $abstractvectortype$ av = $abstractvectortype$.zero(SPECIES);
        int elsize = av.elementSize();
        Assert.assertEquals(elsize, $Wideboxtype$.SIZE);
    }

    @Test
    static void VectorShape$vectorteststype$() {
        $abstractvectortype$ av = $abstractvectortype$.zero(SPECIES);
        VectorShape vsh = av.shape();
        assert(vsh.equals(VectorShape.$Shape$));
    }
}

